% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_nuts_level.R
\name{convert_nuts_level}
\alias{convert_nuts_level}
\title{Convert between NUTS levels}
\usage{
convert_nuts_level(
  data = data,
  to_level = to_level,
  variables = variables,
  weight = NULL,
  missing_rm = FALSE,
  multiple_versions = "break",
  quiet = FALSE
)
}
\arguments{
\item{data}{A nuts.classified object returned by \code{\link[=classify_nuts]{classify_nuts()}}.}

\item{to_level}{Number corresponding to desired NUTS level: \code{1}, \code{2} or \code{3}.}

\item{variables}{Named character specifying variable names and variable type (\code{'absolute'} or \code{'relative'}), e.g. \code{c('var_name' = 'absolute')}.}

\item{weight}{String with name of the weight used for conversion. Can be area size \code{'areaKm'} (default),
population in 2011 \code{'pop11'} or 2018 \code{'pop18'}, or artificial surfaces in 2012 \code{'artif_surf12'} and 2018 \code{'artif_surf18'}.}

\item{missing_rm}{Boolean that is FALSE by default. TRUE removes regional flows that depart from missing NUTS codes.}

\item{multiple_versions}{By default equal to \code{'break'}, throwing an error when providing multiple NUTS versions within groups.
If set to \code{'most_frequent'} data is converted using the best-matching NUTS version.}

\item{quiet}{Suppress messages and warnings. \code{FALSE} by default.}
}
\value{
A tibble containing NUTS codes, aggregated variable values, and possibly grouping variables.
}
\description{
\code{convert_nuts_level()} transforms regional NUTS data between NUTS levels
}
\examples{
library(dplyr)

# Load EUROSTAT data of manure storage deposits
data(manure)

# Data varies at the NUTS level x indicator x year x country x NUTS code level
head(manure)

# Aggregate from NUTS 3 to 2 by indicator x year
manure \%>\%
  filter(nchar(geo) == 5) \%>\%
  classify_nuts(nuts_code = "geo",
                group_vars = c('indic_ag','time')) \%>\%
  # Group vars are automatically passed on
  convert_nuts_level(to_level = 2,
                     variables = c('values'= 'absolute'),
                     weight = 'pop18')

}
